When would you want to use a remote repository rather than keeping all your work
local?

    * when i want to share my code with someone and also have a backup.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

    *  when I'm working on code, it doesn't change without me expecting it e.g if I know the new
    version of some code is broken, I might not want to pull that change until the bug is fixed.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

    * Forks are used within the context of GitHub,when i want to fork from one person without them knowing.

    * Branch add new changes in the same repository.Forking and cloning both copy an entire repository to
    a new location.  
    * The difference between forking and cloning is that forking is a special construct made by GitHub.You can only fork a GitHub repository to another location on GitHub, while you can clone any Git repository to anywhere you have access to.  
     Can use fork to fork  a repository on GitHub when I want to make changes to that repository public, but I don't have permission to modify the original.

 What is the benefit of having a copy of the last known state of the remote stored locally?
     
    * when offline, e.g on a plane, I can update my local copy before I leave. I can do this even if I'm not ready to merge those changes into my own branches yet and still can perform the merge while offline, or need to know what the
    remote version is at some point, I have an easy way to access it.   

 How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?   
    * If I had to collaborate on a coding project without using Git or GitHub or any other form of, we all make changes to a shared folder, for example, a DropBox folder would be a ligter-weight solution than using Git and GitHub.  However, if we
    both wanted to work on the same part of the file, it would be very difficult.
    It would be very hard to know there's a bug.

 When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?  
     * when working directly in master more often.
     * when I'm working on my own or with just one or two people.  
     * When working with a large group,using branches to keep track of which changes have already been reviewed and can be
     extremely helpful.
